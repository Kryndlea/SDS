---
title: Fit that model
format: html
---


One solution. You may have yours. If the results agree, both are fine :).


```py
import esda
import geopandas as gpd
import matplotlib.pyplot as plt
import mgwr
import numpy as np
import seaborn as sns
import statsmodels.formula.api as sm

from libpysal import graph
from splot.esda import lisa_cluster
```

Go back to the [Does it correlate?](../autocorrelation/exercise.qmd) and load the dataset to your Jupyter Notebook. Do not filter for Glasgow this time, use the whole dataset.

```py
simd = gpd.read_file("/Users/martin/Downloads/SG_SIMD_2020.zip")
```

Let's try to understand the effect of a proportion of youths entering university (`"EduUniver"`), crime rate ("`CrimeRate`"), hospital stays related to alcohol use (`"HlthAlcSR"`), hospital stays related to drug use (`"HlthDrugSR"`) and mortality (`"HlthSMR")`.

```py
data = [
    "EduUniver",
    "CrimeRate",
    "HlthAlcSR",
    "HlthDrugSR",
    "HlthSMR",
]
```

Check the columns and ensure they are all `float`  or `int` columns (with numbers, no text.)

```py
simd[data].dtypes
```

```py
simd["EduUniver"] = simd["EduUniver"].str.rstrip('%').astype(float)
```

Create a standard OLS regression predicting `"Rankv2"` based on these 5 variables. *What can you tell about them? How good is the model?*

```py
formula = f"Rankv2 ~ {' + '.join(data)}"
formula
```

```py
ols = sm.ols(formula, data=simd).fit()
```

```py
ols.summary()
```

Compare the prediction with the original data on a map.

```py
predicted = ols.predict(simd)  # <1>
```

```py
f, axs = plt.subplots(2, 1, figsize=(7, 8))
simd.plot(    # <2>
    predicted, legend=True, cmap="coolwarm", ax=axs[0], vmin=0, vmax=simd.Rankv2.max()   # <2>
)    # <2>
simd.plot(    # <3>
    "Rankv2", legend=True, cmap="coolwarm", ax=axs[1], vmin=0, vmax=simd.Rankv2.max()    # <3>
)    # <3>
axs[0].set_title("OLS prediction") # <4>
axs[1].set_title("Actual results") # <4>

axs[0].set_axis_off() # <5>
axs[1].set_axis_off() # <5>
```

Plot residuals

```py
simd["residual"] = ols.resid  # <1>
max_residual = ols.resid.abs().max()  # <2>
ax = simd.plot( # <3>
    "residual", legend=True, cmap="RdBu", vmin=-max_residual, vmax=max_residual # <3>
)  # <3>
ax.set_axis_off()
```

Check for geographical patterns in residuals using the spatial autocorrelation analysis of your choice.

```py
contiguity_r = graph.Graph.build_contiguity(simd).transform("r")
```

```py
simd["residual_lag"] = contiguity_r.lag(simd["residual"])
```

```py
f, ax = plt.subplots(1, figsize=(6, 6))
sns.regplot(
    x="residual",
    y="residual_lag",
    data=simd,
    marker=".",
    scatter_kws={"alpha": 0.2},
    line_kws=dict(color="lightcoral")
)
plt.axvline(0, c="black", alpha=0.5)
plt.axhline(0, c="black", alpha=0.5);
```

```py
lisa = esda.Moran_Local(simd['residual'], contiguity_r.to_W())
```

```py
_ = lisa_cluster(lisa, simd)
```

Create another OLS model and include local authority `"LAName"` in the formula.

```py
formula_fe = f"Rankv2 ~ {' + '.join(data)} + LAName - 1"  # <1>
ols_fe = sm.ols(formula_fe, data=simd).fit() # <2>
```

```py
ols_fe.summary()
```

Create geographically weighted regression using the set of variables from the first model. Use adaptive kernel with `bandiwdth=150`.

```py
coords = simd.centroid.get_coordinates().values # <1>
coords
```

```py
y = simd[f"Rankv2"].values.reshape(-1, 1) # <1>
X = simd[data].values # <2>
```

```py
fixed_bandwidth = mgwr.gwr.GWR(
    coords, y, X, bw=150, fixed=False, name_x=data  # <1>
)
results = fixed_bandwidth.fit()  # <2>
```

```py
results.summary()
```

Explore GWR results

```py
simd["local_r2"] = results.localR2 # <1>
simd.plot("local_r2", legend=True, vmin=0, vmax=1).set_axis_off()
```

```py
f, axs = plt.subplots(3, 1, figsize=(7, 14))
simd.plot(
    ols.predict(simd), legend=True, cmap="coolwarm", ax=axs[0], vmin=0, vmax=simd.Rankv2.max()
)
simd.plot(
    results.predy.flatten(), legend=True, cmap="coolwarm", vmin=0, vmax=simd.Rankv2.max(), ax=axs[1]
).set_axis_off()

simd.plot(
    "Rankv2", legend=True, cmap="coolwarm", vmin=0, vmax=simd.Rankv2.max(), ax=axs[2]
)
axs[0].set_title("OLS prediction")
axs[1].set_title("GWR prediction")
axs[2].set_title("Actual results")

axs[0].set_axis_off()
axs[1].set_axis_off()
axs[2].set_axis_off()
```

```py
sig95 = results.adj_alpha[1] # <1>
critical_t = results.critical_tval(alpha=sig95) # <2>
critical_t
```

```py
significant = np.abs(results.tvalues) > critical_t

fig, axs = plt.subplots(2, 3, figsize=(9, 9))
axs = axs.flatten()
for i, name in enumerate(data):
    significant_mask = significant[:, i + 1]
    simd.plot(results.params[:, i + 1], cmap="plasma", ax=axs[i])
    simd[~significant_mask].plot(color="white", ax=axs[i], alpha=.9)
    axs[i].set_title(name[:20], fontdict={'fontsize': 8})
    axs[i].set_axis_off()
axs[-1].set_axis_off()
```


