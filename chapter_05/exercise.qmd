---
title: "Does it correlate?"
format: html
---

::: {.callout-caution}
This course material is currently under construction and is likely incomplete. The final
version will be released in October 2023.
:::

In this part, you will try to explore spatial autocorrelation on your own.

## Scottish Index of Multiple Deprivation again

In the [exercise on `pandas`](../chapter_02/exercise.qmd), you have worked with the
Scottish Index of Multiple Deprivation (SIMD). Since you learned how to work with spatial
data later, there was no geometry assigned. That will change today.

1. Download the ESRI Shapefile version of Scottish Index of Multiple Deprivation 2020 from [this link](https://spatialdata.gov.scot/geonetwork/srv/eng/catalog.search#/metadata/02866b0b-66e5-46ab-9b1c-d433dc3c2fae).
2. Read it as a `GeoDataFrame` and assign a column you think would be the best as an index.

Now, here's a tricky part. The dataset contains isolates. Those are geometries that do not
share any piece of the border with any other - typically islands.

These cases can create issues in the analysis and distort the results. There are several solutions to this situation, such as connecting the islands to other observations through a different criterium (e.g. nearest neighbour) and combining both spatial weights matrices. For convenience, you will remove them from the dataset because they are a small sample, and their removal is likely not to have a large impact in the calculations.

Technically, this amounts to a subsetting, very much like you saw in the first weeks of the course, although in this case, you will use the `drop` command, which comes in very handy in these cases.

3. Create a contiguity weights matrix.
4. Check which polygons are isolates. Assuming the `GeoDataFrame` is called `simd` and the weights are called `contiguity`, the code could look like this:

```python
ax = simd.plot()
simd.loc[contiguity.isolates].plot(color='red', ax=ax)
```

5. Drop all the isolates. Again, the code should look like this.

```python
simd = simd.drop(contiguity.isolates)
```
6. Create new contiguity weights based on the reduced dataset.

## Global spatial autocorrelation

With the data prepared like that:

### Join Counts

- Create a binary variable from `"Rankv2"` encoding top 50% of areas.
- Measure Join Counts statistic on your new variable.
- *What conclusions can you reach from the Join Counts?*

### Moran's $I$

- Visualise the main `"Rankv2"` with a Moran Plot
- Calculate Moran's $I$
- *What conclusions can you reach from the Moran Plot and Moran's I? What's the main spatial pattern? Does it agree with Join counts?*

## Local spatial autocorrelation

Now that you have a good sense of the overall pattern in the SIMD dataset, let's move to the local scale:

- Calculate LISA statistics for the areas
- Make a map of significant clusters at the 5%
- *Can you identify hotspots or coldspots? If so, what do they mean? What about spatial outliers?*

::: {.callout-warning}
The last action is a bit more sophisticated, put all your brain power into it and you'll achieve it!
:::

- Create cluster maps for significance levels 1% and 10%; compare them with the one we obtained. *What are the main changes? Why?*

## Acknowledgements {.appendix}

This section is derived from _A Course on Geographic Data Science_ by
@darribas_gds_course, licensed under CC-BY-SA 4.0. The text was slightly adapted
to accommodate a different dataset and the inclusion of Join counts.