{
  "hash": "efa56dceb79aefccc95f2c6114d00472",
  "result": {
    "markdown": "---\ntitle: Data wrangling\nformat:\n  html: default\n  ipynb: default\ncode-annotations: below\n---\n\n::: {.callout-caution}\nThis course material is currently under construction and is likely incomplete. The final\nversion will be released in October 2023.\n:::\n\nYou know the basics. What are Jupyter notebooks, how do they work, and how do you run\nPython in them. It is time to start using them for data science (no, that simple math\nyou did the last time doesn't count as data science).\n\nYou are about to enter the PyData ecosystem. It means that you will start learning\nhow to work with Python from the middle. This course does not explicitly cover the\nfundamentals of programming. It is expected that those parts you need you'll be able to\npick as you go through the specialised data science stack. If you're stuck,\nconfused or need further explanation, use Google (or your favourite\nsearch engine), ask AI to explain the code or ask in Slack or during the class. Not\neverything will be told during the course (by design), and the internet is a friend of\nevery programmer, so let's figure out how to use it efficiently from the beginning.\n\nLet's dig in!\n\n## Munging and wrangling\n\nReal-world datasets are messy. There is no way around it: datasets have “holes” (missing\ndata), the amount of formats in which data can be stored is endless, and the best\nstructure to share data is not always the optimum to analyse them, hence the need to\n[munge](http://dictionary.reference.com/browse/munge)[^1] them. As has been correctly\npointed out in many outlets, much of the time spent in what is called Data Science is\nrelated not only to sophisticated modelling and insight but has to do with much more\nbasic and less exotic tasks such as obtaining data, processing, and turning them into a\nshape that makes analysis possible, and exploring it to get to know their basic\nproperties.\n\n[^1]: Data munging and data wrangling are used interchangeably. Pick the one you like.\n\nSurprisingly, very little has been published on patterns, techniques, and best practices\nfor quick and efficient data cleaning, manipulation, and transformation because of how\nlabour-intensive and relevant this aspect is. In this session, you will use a few\nreal-world datasets and learn how to process them into Python so they can be transformed\nand manipulated, if necessary, and analysed. For this, we will introduce some of the\nbread and butter of data analysis and scientific computing in Python. These are\nfundamental tools that are constantly used in almost any task relating to data analysis.\n\nThis notebook covers the basics and the content that is expected to be learnt by every\nstudent. You use a prepared dataset that saves us much of the more intricate processing\nthat goes beyond the introductory level the session is aimed at. If you are interested\nin how it was done, there is a\n[notebook](https://github.com/martinfleis/sds/blob/main/data/chicago_influenza_1918/preprocessing.ipynb).\n\nThis notebook discusses several patterns to clean and structure data properly,\nincluding tidying, subsetting, and aggregating. We finish with some basic visualisation.\nAn additional extension presents more advanced tricks to manipulate tabular data.\n\n## Dataset\n\nYou will be exploring demographic characteristics of Chicago in 1918 linked to the\ninfluenza mortality during the pandemic that happened back then, coming from the\nresearch paper by @grantz2016disparities. The data are aggregated to census tracts and\ncontain information on unemployment, home ownership, age structure and influenza\nmortality from a period of 8 weeks.\n\nThe main tool you use is the `pandas` package. As with the `math` you used\n[before](../chapter_01/hands_on.qmd), you must import it first.\n\n::: {#3a09448e .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd  # <1>\n```\n:::\n\n\n1. Import the `pandas` package under the alias `pd`. Using the alias is not\nnecessary, but it is a convention nearly everyone follows.\n\nThe data is stored in a CSV file. To make things easier, you can read data from a file\nposted online so, for now, you do not need to download any dataset:\n\n::: {#9e8a1b1e .cell execution_count=2}\n``` {.python .cell-code}\nchicago_1918 = pd.read_csv(                                                         # <1>\n    \"https://martinfleischmann.net/sds/chapter_02/data/chicago_influenza_1918.csv\", # <2>\n    index_col=\"geography_code\",                                                     # <3>\n)\n```\n:::\n\n\n1. Use the `read_csv` function from `pandas`. Remember that you have imported `pandas` as `pd`.\n2. Specify the path to the file. It could be a web address like here or a local file path.\n3. Use the column `geography_code` as an index of the table by passing its name to the\n`index_col` keyword argument. It is not strictly necessary but allows us to choose and index\non read instead of specifying it later. More on indices below.\n\n::: {.callout-tip}\nWe are using `read_csv` because the file we want to read is in the CSV format. However,\n`pandas` allows for many more formats to be read and write. A full list of formats\nsupported may be found in [the documentation](https://pandas.pydata.org/docs/user_guide/io.html).\n:::\n\n::: {.callout-note}\n## Alternative\nInstead of reading the file directly off the web, it is possible to download it manually,\n store it on your computer, and read it locally. To do that, you can follow these steps:\n\n1. Download the file by right-clicking on\n[this link](https://martinfleischmann.net/sds/chapter_02/data/chicago_influenza_1918.csv)\nand saving the file\n2. Place the file in the same folder as the notebook where you intend to read it\n3. Replace the code in the cell above with:\n\n```python\nchicago_1918 = pd.read_csv(\n    \"chicago_influenza_1918.csv\",\n    index_col=\"geography_code\",\n)\n```\n:::\n## Pandas 101\n\nNow, you are ready to start playing and interrogating the dataset! What you have at your\nfingertips is a table summarising, for each of the census tracts in Chicago more than\na century ago, how many people lived in each by age, accompanied by some other\nsocioeconomic data and influenza mortality. These tables are called `DataFrame` objects,\nand they have a lot of functionality built-in to explore and manipulate the data they\ncontain. Let’s explore a few of those cool tricks!\n\n### Data Structures\n\nThe first aspect worth spending a bit of time on is the structure of a `DataFrame`. You\ncan print it by simply typing its name:\n\n::: {#49f170ac .cell execution_count=3}\n``` {.python .cell-code}\nchicago_1918\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gross_acres</th>\n      <th>illit</th>\n      <th>unemployed_pct</th>\n      <th>ho_pct</th>\n      <th>agecat1</th>\n      <th>agecat2</th>\n      <th>agecat3</th>\n      <th>agecat4</th>\n      <th>agecat5</th>\n      <th>agecat6</th>\n      <th>agecat7</th>\n      <th>influenza</th>\n    </tr>\n    <tr>\n      <th>geography_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>G17003100001</th>\n      <td>1388.2</td>\n      <td>116</td>\n      <td>0.376950</td>\n      <td>0.124823</td>\n      <td>46</td>\n      <td>274</td>\n      <td>257</td>\n      <td>311</td>\n      <td>222</td>\n      <td>1122</td>\n      <td>587</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>G17003100002</th>\n      <td>217.7</td>\n      <td>14</td>\n      <td>0.399571</td>\n      <td>0.071647</td>\n      <td>35</td>\n      <td>320</td>\n      <td>441</td>\n      <td>624</td>\n      <td>276</td>\n      <td>1061</td>\n      <td>508</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>G17003100003</th>\n      <td>401.3</td>\n      <td>69</td>\n      <td>0.349558</td>\n      <td>0.092920</td>\n      <td>50</td>\n      <td>265</td>\n      <td>179</td>\n      <td>187</td>\n      <td>163</td>\n      <td>1020</td>\n      <td>392</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>G17003100004</th>\n      <td>86.9</td>\n      <td>11</td>\n      <td>0.422535</td>\n      <td>0.030072</td>\n      <td>43</td>\n      <td>241</td>\n      <td>129</td>\n      <td>141</td>\n      <td>123</td>\n      <td>1407</td>\n      <td>539</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>G17003100005</th>\n      <td>337.1</td>\n      <td>20</td>\n      <td>0.431822</td>\n      <td>0.084703</td>\n      <td>65</td>\n      <td>464</td>\n      <td>369</td>\n      <td>464</td>\n      <td>328</td>\n      <td>2625</td>\n      <td>1213</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>G17003100492</th>\n      <td>2176.6</td>\n      <td>136</td>\n      <td>0.404430</td>\n      <td>0.173351</td>\n      <td>85</td>\n      <td>606</td>\n      <td>520</td>\n      <td>705</td>\n      <td>439</td>\n      <td>2141</td>\n      <td>1460</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>G17003100493</th>\n      <td>680.0</td>\n      <td>271</td>\n      <td>0.377207</td>\n      <td>0.130158</td>\n      <td>243</td>\n      <td>1349</td>\n      <td>957</td>\n      <td>1264</td>\n      <td>957</td>\n      <td>4653</td>\n      <td>2180</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>G17003100494</th>\n      <td>1392.8</td>\n      <td>1504</td>\n      <td>0.336032</td>\n      <td>0.072317</td>\n      <td>309</td>\n      <td>1779</td>\n      <td>1252</td>\n      <td>1598</td>\n      <td>1086</td>\n      <td>6235</td>\n      <td>2673</td>\n      <td>85</td>\n    </tr>\n    <tr>\n      <th>G17003100495</th>\n      <td>640.0</td>\n      <td>167</td>\n      <td>0.311917</td>\n      <td>0.085667</td>\n      <td>59</td>\n      <td>333</td>\n      <td>206</td>\n      <td>193</td>\n      <td>80</td>\n      <td>726</td>\n      <td>224</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>G17003100496</th>\n      <td>709.8</td>\n      <td>340</td>\n      <td>0.369765</td>\n      <td>0.113549</td>\n      <td>157</td>\n      <td>979</td>\n      <td>761</td>\n      <td>959</td>\n      <td>594</td>\n      <td>2862</td>\n      <td>1206</td>\n      <td>30</td>\n    </tr>\n  </tbody>\n</table>\n<p>496 rows × 12 columns</p>\n</div>\n```\n:::\n:::\n\n\nNote the printing is cut to keep a nice and compact view but enough to see its\nstructure. Since they represent a table of data, `DataFrame` objects have two dimensions:\nrows and columns. Each of these is automatically assigned a name in what we will call\nits _index_. When printing, the index of each dimension is rendered in bold, as opposed\nto the standard rendering for the content. The example above shows how the\ncolumn index is automatically picked up from the `.csv` file’s column names. For rows,\nwe have specified when reading the file we wanted the column `geography_code`, so that is\nused. If we hadn’t set any, `pandas` would automatically generate a sequence starting\nin `0` and going all the way to the number of rows minus one. This is the standard\nstructure of a `DataFrame` object, so you will come to it over and over. Importantly, even\nwhen you move to spatial data, your datasets will have a similar structure.\n\nOne final feature that is worth mentioning about these tables is that they can hold\ncolumns with different types of data. In this example, you have\ncounts (or `int` for integer types) and ratios (or 'float' for floating point numbers\n - a number with decimals) for each column. But it is useful to keep in mind that\nyou can combine this with columns that hold other types of data such as categories, text\n(`str`, for string), dates or, as we will see later in the course, geographic features.\n\nTo extract a single column from this `DataFrame`, specify its name\nin the square brackets (`[]`). Note that the name, in this case, is a `string`. A piece\nof text. As such, it needs to be within single (`'`) or double quotes (`\"`). The resulting\ndata structure is no longer a `DataFrame`, but we have a `Series` because we deal with a\nsingle column.\n\n::: {#ad0fbc38 .cell execution_count=4}\n``` {.python .cell-code}\nchicago_1918[\"influenza\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\ngeography_code\nG17003100001     9\nG17003100002     6\nG17003100003     8\nG17003100004     2\nG17003100005     7\n                ..\nG17003100492    12\nG17003100493    40\nG17003100494    85\nG17003100495    15\nG17003100496    30\nName: influenza, Length: 496, dtype: int64\n```\n:::\n:::\n\n\n### Inspect\n\nInspecting what it looks like. You can check the table's top (or bottom) X lines by\npassing X to the method `head` (`tail`). For example, for the top/bottom five lines:\n\n::: {#c3f9bf64 .cell execution_count=5}\n``` {.python .cell-code}\nchicago_1918.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gross_acres</th>\n      <th>illit</th>\n      <th>unemployed_pct</th>\n      <th>ho_pct</th>\n      <th>agecat1</th>\n      <th>agecat2</th>\n      <th>agecat3</th>\n      <th>agecat4</th>\n      <th>agecat5</th>\n      <th>agecat6</th>\n      <th>agecat7</th>\n      <th>influenza</th>\n    </tr>\n    <tr>\n      <th>geography_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>G17003100001</th>\n      <td>1388.2</td>\n      <td>116</td>\n      <td>0.376950</td>\n      <td>0.124823</td>\n      <td>46</td>\n      <td>274</td>\n      <td>257</td>\n      <td>311</td>\n      <td>222</td>\n      <td>1122</td>\n      <td>587</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>G17003100002</th>\n      <td>217.7</td>\n      <td>14</td>\n      <td>0.399571</td>\n      <td>0.071647</td>\n      <td>35</td>\n      <td>320</td>\n      <td>441</td>\n      <td>624</td>\n      <td>276</td>\n      <td>1061</td>\n      <td>508</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>G17003100003</th>\n      <td>401.3</td>\n      <td>69</td>\n      <td>0.349558</td>\n      <td>0.092920</td>\n      <td>50</td>\n      <td>265</td>\n      <td>179</td>\n      <td>187</td>\n      <td>163</td>\n      <td>1020</td>\n      <td>392</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>G17003100004</th>\n      <td>86.9</td>\n      <td>11</td>\n      <td>0.422535</td>\n      <td>0.030072</td>\n      <td>43</td>\n      <td>241</td>\n      <td>129</td>\n      <td>141</td>\n      <td>123</td>\n      <td>1407</td>\n      <td>539</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>G17003100005</th>\n      <td>337.1</td>\n      <td>20</td>\n      <td>0.431822</td>\n      <td>0.084703</td>\n      <td>65</td>\n      <td>464</td>\n      <td>369</td>\n      <td>464</td>\n      <td>328</td>\n      <td>2625</td>\n      <td>1213</td>\n      <td>7</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#bc13629c .cell execution_count=6}\n``` {.python .cell-code}\nchicago_1918.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gross_acres</th>\n      <th>illit</th>\n      <th>unemployed_pct</th>\n      <th>ho_pct</th>\n      <th>agecat1</th>\n      <th>agecat2</th>\n      <th>agecat3</th>\n      <th>agecat4</th>\n      <th>agecat5</th>\n      <th>agecat6</th>\n      <th>agecat7</th>\n      <th>influenza</th>\n    </tr>\n    <tr>\n      <th>geography_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>G17003100492</th>\n      <td>2176.6</td>\n      <td>136</td>\n      <td>0.404430</td>\n      <td>0.173351</td>\n      <td>85</td>\n      <td>606</td>\n      <td>520</td>\n      <td>705</td>\n      <td>439</td>\n      <td>2141</td>\n      <td>1460</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>G17003100493</th>\n      <td>680.0</td>\n      <td>271</td>\n      <td>0.377207</td>\n      <td>0.130158</td>\n      <td>243</td>\n      <td>1349</td>\n      <td>957</td>\n      <td>1264</td>\n      <td>957</td>\n      <td>4653</td>\n      <td>2180</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>G17003100494</th>\n      <td>1392.8</td>\n      <td>1504</td>\n      <td>0.336032</td>\n      <td>0.072317</td>\n      <td>309</td>\n      <td>1779</td>\n      <td>1252</td>\n      <td>1598</td>\n      <td>1086</td>\n      <td>6235</td>\n      <td>2673</td>\n      <td>85</td>\n    </tr>\n    <tr>\n      <th>G17003100495</th>\n      <td>640.0</td>\n      <td>167</td>\n      <td>0.311917</td>\n      <td>0.085667</td>\n      <td>59</td>\n      <td>333</td>\n      <td>206</td>\n      <td>193</td>\n      <td>80</td>\n      <td>726</td>\n      <td>224</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>G17003100496</th>\n      <td>709.8</td>\n      <td>340</td>\n      <td>0.369765</td>\n      <td>0.113549</td>\n      <td>157</td>\n      <td>979</td>\n      <td>761</td>\n      <td>959</td>\n      <td>594</td>\n      <td>2862</td>\n      <td>1206</td>\n      <td>30</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nOr get an overview of the table:\n\n::: {#4e73cb5b .cell execution_count=7}\n``` {.python .cell-code}\nchicago_1918.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nIndex: 496 entries, G17003100001 to G17003100496\nData columns (total 12 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   gross_acres     496 non-null    float64\n 1   illit           496 non-null    int64  \n 2   unemployed_pct  496 non-null    float64\n 3   ho_pct          496 non-null    float64\n 4   agecat1         496 non-null    int64  \n 5   agecat2         496 non-null    int64  \n 6   agecat3         496 non-null    int64  \n 7   agecat4         496 non-null    int64  \n 8   agecat5         496 non-null    int64  \n 9   agecat6         496 non-null    int64  \n 10  agecat7         496 non-null    int64  \n 11  influenza       496 non-null    int64  \ndtypes: float64(3), int64(9)\nmemory usage: 66.5+ KB\n```\n:::\n:::\n\n\n### Summarise\n\nOr of the _values_ of the table:\n\n::: {#02da7323 .cell execution_count=8}\n``` {.python .cell-code}\nchicago_1918.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gross_acres</th>\n      <th>illit</th>\n      <th>unemployed_pct</th>\n      <th>ho_pct</th>\n      <th>agecat1</th>\n      <th>agecat2</th>\n      <th>agecat3</th>\n      <th>agecat4</th>\n      <th>agecat5</th>\n      <th>agecat6</th>\n      <th>agecat7</th>\n      <th>influenza</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>496.000000</td>\n      <td>496.000000</td>\n      <td>496.000000</td>\n      <td>496.000000</td>\n      <td>496.000000</td>\n      <td>496.000000</td>\n      <td>496.000000</td>\n      <td>496.000000</td>\n      <td>496.000000</td>\n      <td>496.000000</td>\n      <td>496.000000</td>\n      <td>496.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>233.245968</td>\n      <td>199.116935</td>\n      <td>0.345818</td>\n      <td>0.061174</td>\n      <td>102.370968</td>\n      <td>555.167339</td>\n      <td>406.560484</td>\n      <td>524.100806</td>\n      <td>416.044355</td>\n      <td>2361.582661</td>\n      <td>1052.681452</td>\n      <td>16.070565</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>391.630857</td>\n      <td>297.836201</td>\n      <td>0.050498</td>\n      <td>0.038189</td>\n      <td>78.677423</td>\n      <td>423.526444</td>\n      <td>301.564896</td>\n      <td>369.875444</td>\n      <td>281.825682</td>\n      <td>1545.469426</td>\n      <td>722.955717</td>\n      <td>12.252440</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>6.900000</td>\n      <td>0.000000</td>\n      <td>0.057800</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>1.000000</td>\n      <td>4.000000</td>\n      <td>0.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>79.975000</td>\n      <td>30.750000</td>\n      <td>0.323973</td>\n      <td>0.032106</td>\n      <td>46.750000</td>\n      <td>256.500000</td>\n      <td>193.500000</td>\n      <td>253.750000</td>\n      <td>220.500000</td>\n      <td>1169.750000</td>\n      <td>519.750000</td>\n      <td>8.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>99.500000</td>\n      <td>84.000000</td>\n      <td>0.353344</td>\n      <td>0.054389</td>\n      <td>82.000000</td>\n      <td>442.500000</td>\n      <td>331.500000</td>\n      <td>453.500000</td>\n      <td>377.000000</td>\n      <td>2102.000000</td>\n      <td>918.500000</td>\n      <td>13.500000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>180.125000</td>\n      <td>241.250000</td>\n      <td>0.373382</td>\n      <td>0.084762</td>\n      <td>136.000000</td>\n      <td>717.500000</td>\n      <td>532.500000</td>\n      <td>709.500000</td>\n      <td>551.750000</td>\n      <td>3191.750000</td>\n      <td>1379.250000</td>\n      <td>21.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>3840.000000</td>\n      <td>2596.000000</td>\n      <td>0.495413</td>\n      <td>0.197391</td>\n      <td>427.000000</td>\n      <td>2512.000000</td>\n      <td>1917.000000</td>\n      <td>2665.000000</td>\n      <td>2454.000000</td>\n      <td>9792.000000</td>\n      <td>4163.000000</td>\n      <td>85.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNote how the output is also a `DataFrame` object, so you can do with it the same things\nyou would with the original table (e.g. writing it to a file).\n\nIn this case, the summary might be better presented if the table is “transposed”:\n\n::: {#08253480 .cell execution_count=9}\n``` {.python .cell-code}\nchicago_1918.describe().T\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>gross_acres</th>\n      <td>496.0</td>\n      <td>233.245968</td>\n      <td>391.630857</td>\n      <td>6.9000</td>\n      <td>79.975000</td>\n      <td>99.500000</td>\n      <td>180.125000</td>\n      <td>3840.000000</td>\n    </tr>\n    <tr>\n      <th>illit</th>\n      <td>496.0</td>\n      <td>199.116935</td>\n      <td>297.836201</td>\n      <td>0.0000</td>\n      <td>30.750000</td>\n      <td>84.000000</td>\n      <td>241.250000</td>\n      <td>2596.000000</td>\n    </tr>\n    <tr>\n      <th>unemployed_pct</th>\n      <td>496.0</td>\n      <td>0.345818</td>\n      <td>0.050498</td>\n      <td>0.0578</td>\n      <td>0.323973</td>\n      <td>0.353344</td>\n      <td>0.373382</td>\n      <td>0.495413</td>\n    </tr>\n    <tr>\n      <th>ho_pct</th>\n      <td>496.0</td>\n      <td>0.061174</td>\n      <td>0.038189</td>\n      <td>0.0000</td>\n      <td>0.032106</td>\n      <td>0.054389</td>\n      <td>0.084762</td>\n      <td>0.197391</td>\n    </tr>\n    <tr>\n      <th>agecat1</th>\n      <td>496.0</td>\n      <td>102.370968</td>\n      <td>78.677423</td>\n      <td>0.0000</td>\n      <td>46.750000</td>\n      <td>82.000000</td>\n      <td>136.000000</td>\n      <td>427.000000</td>\n    </tr>\n    <tr>\n      <th>agecat2</th>\n      <td>496.0</td>\n      <td>555.167339</td>\n      <td>423.526444</td>\n      <td>3.0000</td>\n      <td>256.500000</td>\n      <td>442.500000</td>\n      <td>717.500000</td>\n      <td>2512.000000</td>\n    </tr>\n    <tr>\n      <th>agecat3</th>\n      <td>496.0</td>\n      <td>406.560484</td>\n      <td>301.564896</td>\n      <td>1.0000</td>\n      <td>193.500000</td>\n      <td>331.500000</td>\n      <td>532.500000</td>\n      <td>1917.000000</td>\n    </tr>\n    <tr>\n      <th>agecat4</th>\n      <td>496.0</td>\n      <td>524.100806</td>\n      <td>369.875444</td>\n      <td>4.0000</td>\n      <td>253.750000</td>\n      <td>453.500000</td>\n      <td>709.500000</td>\n      <td>2665.000000</td>\n    </tr>\n    <tr>\n      <th>agecat5</th>\n      <td>496.0</td>\n      <td>416.044355</td>\n      <td>281.825682</td>\n      <td>0.0000</td>\n      <td>220.500000</td>\n      <td>377.000000</td>\n      <td>551.750000</td>\n      <td>2454.000000</td>\n    </tr>\n    <tr>\n      <th>agecat6</th>\n      <td>496.0</td>\n      <td>2361.582661</td>\n      <td>1545.469426</td>\n      <td>8.0000</td>\n      <td>1169.750000</td>\n      <td>2102.000000</td>\n      <td>3191.750000</td>\n      <td>9792.000000</td>\n    </tr>\n    <tr>\n      <th>agecat7</th>\n      <td>496.0</td>\n      <td>1052.681452</td>\n      <td>722.955717</td>\n      <td>6.0000</td>\n      <td>519.750000</td>\n      <td>918.500000</td>\n      <td>1379.250000</td>\n      <td>4163.000000</td>\n    </tr>\n    <tr>\n      <th>influenza</th>\n      <td>496.0</td>\n      <td>16.070565</td>\n      <td>12.252440</td>\n      <td>0.0000</td>\n      <td>8.000000</td>\n      <td>13.500000</td>\n      <td>21.000000</td>\n      <td>85.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nEqually, common descriptive statistics are also available. To obtain minimum values for\neach column, you can use `.min()`.\n\n::: {#dfbef8dd .cell execution_count=10}\n``` {.python .cell-code}\nchicago_1918.min()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\ngross_acres       6.9000\nillit             0.0000\nunemployed_pct    0.0578\nho_pct            0.0000\nagecat1           0.0000\nagecat2           3.0000\nagecat3           1.0000\nagecat4           4.0000\nagecat5           0.0000\nagecat6           8.0000\nagecat7           6.0000\ninfluenza         0.0000\ndtype: float64\n```\n:::\n:::\n\n\nOr to obtain a minimum for a single column only.\n\n::: {#2b82a416 .cell execution_count=11}\n``` {.python .cell-code}\nchicago_1918[\"influenza\"].min()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n0\n```\n:::\n:::\n\n\nNote here how we have restricted the calculation of the minimum value to one column only\nby getting the `Series` and calling `.min()` on that.\n\nSimilarly, we can restrict the calculations to a single row using `.loc[]` indexer:\n\n::: {#4364fc24 .cell execution_count=12}\n``` {.python .cell-code}\nchicago_1918.loc[\"G17003100492\"].max()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n2176.6\n```\n:::\n:::\n\n\n### Create new columns\n\nYou can generate new variables by applying operations to existing ones. For example, you\ncan calculate the total population by area. Here are a couple of ways to do it:\n\n::: {#73e598d6 .cell execution_count=13}\n``` {.python .cell-code}\n# This one is longer, hardcoded\ntotal_population = (            # <1>\n    chicago_1918[\"agecat1\"]     # <2>\n    + chicago_1918[\"agecat2\"]   # <2>\n    + chicago_1918[\"agecat3\"]   # <2>\n    + chicago_1918[\"agecat4\"]   # <2>\n    + chicago_1918[\"agecat5\"]   # <2>\n    + chicago_1918[\"agecat6\"]   # <2>\n    + chicago_1918[\"agecat7\"]   # <2>\n)\ntotal_population.head()         # <3>\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\ngeography_code\nG17003100001    2819\nG17003100002    3265\nG17003100003    2256\nG17003100004    2623\nG17003100005    5528\ndtype: int64\n```\n:::\n:::\n\n\n1. Create a new variable called `total_population` to store the result.\n2. Select all the columns and add them together\n3. Print the top of the variable\n\n::: {#02012b0b .cell execution_count=14}\n``` {.python .cell-code}\n# This one is shorted, using a range of columns and sum\ntotal_population = chicago_1918.loc[:, \"agecat1\":\"agecat7\"].sum(axis=1)  # <1>\ntotal_population.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\ngeography_code\nG17003100001    2819\nG17003100002    3265\nG17003100003    2256\nG17003100004    2623\nG17003100005    5528\ndtype: int64\n```\n:::\n:::\n\n\n1. This line is simple, but a lot happens here. Using `.loc[]`, you select all the rows\n(`:` part) and all the columns between `\"agecat1\"` and `\"agecat7\"`. Then you apply\n`.sum()` over `axis=1`, which means along rows, to get a sum per each row.\n\nOnce you have created the variable, you can make it part of the table:\n\n::: {#c43dcf33 .cell execution_count=15}\n``` {.python .cell-code}\nchicago_1918[\"total_population\"] = total_population  # <1>\nchicago_1918.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gross_acres</th>\n      <th>illit</th>\n      <th>unemployed_pct</th>\n      <th>ho_pct</th>\n      <th>agecat1</th>\n      <th>agecat2</th>\n      <th>agecat3</th>\n      <th>agecat4</th>\n      <th>agecat5</th>\n      <th>agecat6</th>\n      <th>agecat7</th>\n      <th>influenza</th>\n      <th>total_population</th>\n    </tr>\n    <tr>\n      <th>geography_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>G17003100001</th>\n      <td>1388.2</td>\n      <td>116</td>\n      <td>0.376950</td>\n      <td>0.124823</td>\n      <td>46</td>\n      <td>274</td>\n      <td>257</td>\n      <td>311</td>\n      <td>222</td>\n      <td>1122</td>\n      <td>587</td>\n      <td>9</td>\n      <td>2819</td>\n    </tr>\n    <tr>\n      <th>G17003100002</th>\n      <td>217.7</td>\n      <td>14</td>\n      <td>0.399571</td>\n      <td>0.071647</td>\n      <td>35</td>\n      <td>320</td>\n      <td>441</td>\n      <td>624</td>\n      <td>276</td>\n      <td>1061</td>\n      <td>508</td>\n      <td>6</td>\n      <td>3265</td>\n    </tr>\n    <tr>\n      <th>G17003100003</th>\n      <td>401.3</td>\n      <td>69</td>\n      <td>0.349558</td>\n      <td>0.092920</td>\n      <td>50</td>\n      <td>265</td>\n      <td>179</td>\n      <td>187</td>\n      <td>163</td>\n      <td>1020</td>\n      <td>392</td>\n      <td>8</td>\n      <td>2256</td>\n    </tr>\n    <tr>\n      <th>G17003100004</th>\n      <td>86.9</td>\n      <td>11</td>\n      <td>0.422535</td>\n      <td>0.030072</td>\n      <td>43</td>\n      <td>241</td>\n      <td>129</td>\n      <td>141</td>\n      <td>123</td>\n      <td>1407</td>\n      <td>539</td>\n      <td>2</td>\n      <td>2623</td>\n    </tr>\n    <tr>\n      <th>G17003100005</th>\n      <td>337.1</td>\n      <td>20</td>\n      <td>0.431822</td>\n      <td>0.084703</td>\n      <td>65</td>\n      <td>464</td>\n      <td>369</td>\n      <td>464</td>\n      <td>328</td>\n      <td>2625</td>\n      <td>1213</td>\n      <td>7</td>\n      <td>5528</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n1. Assing a variable `total_population` that contains a `Series` as a column\n`\"total_population\"`. `pandas` creates that column automatically. If it existed, it would\nget overridden.\n\nYou can also do other mathematical operations on columns. These are always automatically\napplied to individual values in corresponding rows.\n\n::: {#2ae9d0f9 .cell execution_count=16}\n``` {.python .cell-code}\nhomeowners = chicago_1918[\"total_population\"] * chicago_1918[\"ho_pct\"]  # <1>\nhomeowners.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\ngeography_code\nG17003100001    351.875177\nG17003100002    233.928353\nG17003100003    209.628319\nG17003100004     78.879711\nG17003100005    468.237675\ndtype: float64\n```\n:::\n:::\n\n\n1. A product of the total population and home ownership percentage provides an estimation\nof the number of homeowners per census tract.\n\n::: {#25520e1d .cell execution_count=17}\n``` {.python .cell-code}\npop_density = chicago_1918[\"total_population\"] / chicago_1918[\"gross_acres\"]  # <1>\npop_density.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\ngeography_code\nG17003100001     2.030687\nG17003100002    14.997703\nG17003100003     5.621729\nG17003100004    30.184120\nG17003100005    16.398695\ndtype: float64\n```\n:::\n:::\n\n\n1. A division of the total population by the area results in an estimation\nof the population density.\n\nA different spin on this is assigning new values: you can generate new variables with\nscalars[^scalar], and modify those:\n\n[^scalar]: Scalar is a single value, like a number (`42`) or a string (`\"towel\"`).\n\n::: {#0fd00d7e .cell execution_count=18}\n``` {.python .cell-code}\nchicago_1918[\"ones\"] = 1  # <1>\nchicago_1918.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gross_acres</th>\n      <th>illit</th>\n      <th>unemployed_pct</th>\n      <th>ho_pct</th>\n      <th>agecat1</th>\n      <th>agecat2</th>\n      <th>agecat3</th>\n      <th>agecat4</th>\n      <th>agecat5</th>\n      <th>agecat6</th>\n      <th>agecat7</th>\n      <th>influenza</th>\n      <th>total_population</th>\n      <th>ones</th>\n    </tr>\n    <tr>\n      <th>geography_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>G17003100001</th>\n      <td>1388.2</td>\n      <td>116</td>\n      <td>0.376950</td>\n      <td>0.124823</td>\n      <td>46</td>\n      <td>274</td>\n      <td>257</td>\n      <td>311</td>\n      <td>222</td>\n      <td>1122</td>\n      <td>587</td>\n      <td>9</td>\n      <td>2819</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>G17003100002</th>\n      <td>217.7</td>\n      <td>14</td>\n      <td>0.399571</td>\n      <td>0.071647</td>\n      <td>35</td>\n      <td>320</td>\n      <td>441</td>\n      <td>624</td>\n      <td>276</td>\n      <td>1061</td>\n      <td>508</td>\n      <td>6</td>\n      <td>3265</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>G17003100003</th>\n      <td>401.3</td>\n      <td>69</td>\n      <td>0.349558</td>\n      <td>0.092920</td>\n      <td>50</td>\n      <td>265</td>\n      <td>179</td>\n      <td>187</td>\n      <td>163</td>\n      <td>1020</td>\n      <td>392</td>\n      <td>8</td>\n      <td>2256</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>G17003100004</th>\n      <td>86.9</td>\n      <td>11</td>\n      <td>0.422535</td>\n      <td>0.030072</td>\n      <td>43</td>\n      <td>241</td>\n      <td>129</td>\n      <td>141</td>\n      <td>123</td>\n      <td>1407</td>\n      <td>539</td>\n      <td>2</td>\n      <td>2623</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>G17003100005</th>\n      <td>337.1</td>\n      <td>20</td>\n      <td>0.431822</td>\n      <td>0.084703</td>\n      <td>65</td>\n      <td>464</td>\n      <td>369</td>\n      <td>464</td>\n      <td>328</td>\n      <td>2625</td>\n      <td>1213</td>\n      <td>7</td>\n      <td>5528</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n1. Create a new column named `\"ones\"` with all ones.\n\nAnd you can modify specific values too:\n\n::: {#cd79ed5b .cell execution_count=19}\n``` {.python .cell-code}\nchicago_1918.loc[\"G17003100001\", \"ones\"] = 3\nchicago_1918.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gross_acres</th>\n      <th>illit</th>\n      <th>unemployed_pct</th>\n      <th>ho_pct</th>\n      <th>agecat1</th>\n      <th>agecat2</th>\n      <th>agecat3</th>\n      <th>agecat4</th>\n      <th>agecat5</th>\n      <th>agecat6</th>\n      <th>agecat7</th>\n      <th>influenza</th>\n      <th>total_population</th>\n      <th>ones</th>\n    </tr>\n    <tr>\n      <th>geography_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>G17003100001</th>\n      <td>1388.2</td>\n      <td>116</td>\n      <td>0.376950</td>\n      <td>0.124823</td>\n      <td>46</td>\n      <td>274</td>\n      <td>257</td>\n      <td>311</td>\n      <td>222</td>\n      <td>1122</td>\n      <td>587</td>\n      <td>9</td>\n      <td>2819</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>G17003100002</th>\n      <td>217.7</td>\n      <td>14</td>\n      <td>0.399571</td>\n      <td>0.071647</td>\n      <td>35</td>\n      <td>320</td>\n      <td>441</td>\n      <td>624</td>\n      <td>276</td>\n      <td>1061</td>\n      <td>508</td>\n      <td>6</td>\n      <td>3265</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>G17003100003</th>\n      <td>401.3</td>\n      <td>69</td>\n      <td>0.349558</td>\n      <td>0.092920</td>\n      <td>50</td>\n      <td>265</td>\n      <td>179</td>\n      <td>187</td>\n      <td>163</td>\n      <td>1020</td>\n      <td>392</td>\n      <td>8</td>\n      <td>2256</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>G17003100004</th>\n      <td>86.9</td>\n      <td>11</td>\n      <td>0.422535</td>\n      <td>0.030072</td>\n      <td>43</td>\n      <td>241</td>\n      <td>129</td>\n      <td>141</td>\n      <td>123</td>\n      <td>1407</td>\n      <td>539</td>\n      <td>2</td>\n      <td>2623</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>G17003100005</th>\n      <td>337.1</td>\n      <td>20</td>\n      <td>0.431822</td>\n      <td>0.084703</td>\n      <td>65</td>\n      <td>464</td>\n      <td>369</td>\n      <td>464</td>\n      <td>328</td>\n      <td>2625</td>\n      <td>1213</td>\n      <td>7</td>\n      <td>5528</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Remove columns\n\nPermanently deleting variables is also within reach of one command:\n\n::: {#c7b89452 .cell execution_count=20}\n``` {.python .cell-code}\nchicago_1918 = chicago_1918.drop(columns=\"ones\")\nchicago_1918.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gross_acres</th>\n      <th>illit</th>\n      <th>unemployed_pct</th>\n      <th>ho_pct</th>\n      <th>agecat1</th>\n      <th>agecat2</th>\n      <th>agecat3</th>\n      <th>agecat4</th>\n      <th>agecat5</th>\n      <th>agecat6</th>\n      <th>agecat7</th>\n      <th>influenza</th>\n      <th>total_population</th>\n    </tr>\n    <tr>\n      <th>geography_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>G17003100001</th>\n      <td>1388.2</td>\n      <td>116</td>\n      <td>0.376950</td>\n      <td>0.124823</td>\n      <td>46</td>\n      <td>274</td>\n      <td>257</td>\n      <td>311</td>\n      <td>222</td>\n      <td>1122</td>\n      <td>587</td>\n      <td>9</td>\n      <td>2819</td>\n    </tr>\n    <tr>\n      <th>G17003100002</th>\n      <td>217.7</td>\n      <td>14</td>\n      <td>0.399571</td>\n      <td>0.071647</td>\n      <td>35</td>\n      <td>320</td>\n      <td>441</td>\n      <td>624</td>\n      <td>276</td>\n      <td>1061</td>\n      <td>508</td>\n      <td>6</td>\n      <td>3265</td>\n    </tr>\n    <tr>\n      <th>G17003100003</th>\n      <td>401.3</td>\n      <td>69</td>\n      <td>0.349558</td>\n      <td>0.092920</td>\n      <td>50</td>\n      <td>265</td>\n      <td>179</td>\n      <td>187</td>\n      <td>163</td>\n      <td>1020</td>\n      <td>392</td>\n      <td>8</td>\n      <td>2256</td>\n    </tr>\n    <tr>\n      <th>G17003100004</th>\n      <td>86.9</td>\n      <td>11</td>\n      <td>0.422535</td>\n      <td>0.030072</td>\n      <td>43</td>\n      <td>241</td>\n      <td>129</td>\n      <td>141</td>\n      <td>123</td>\n      <td>1407</td>\n      <td>539</td>\n      <td>2</td>\n      <td>2623</td>\n    </tr>\n    <tr>\n      <th>G17003100005</th>\n      <td>337.1</td>\n      <td>20</td>\n      <td>0.431822</td>\n      <td>0.084703</td>\n      <td>65</td>\n      <td>464</td>\n      <td>369</td>\n      <td>464</td>\n      <td>328</td>\n      <td>2625</td>\n      <td>1213</td>\n      <td>7</td>\n      <td>5528</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Index-based queries\n\nHere, you explore how to subset parts of a `DataFrame` if you know exactly which bits\nyou want. For example, if you want to extract the influenza mortality and total population of the\nfirst four areas in the table, you use `loc` with lists:\n\n::: {#eff9178b .cell execution_count=21}\n``` {.python .cell-code}\ndeath_pop_first4 = chicago_1918.loc[                                   # <1>\n    [\"G17003100001\", \"G17003100002\", \"G17003100003\", \"G17003100004\"],  # <2>\n    [\"influenza\", \"total_population\"],                                 # <3>\n]\ndeath_pop_first4\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>influenza</th>\n      <th>total_population</th>\n    </tr>\n    <tr>\n      <th>geography_code</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>G17003100001</th>\n      <td>9</td>\n      <td>2819</td>\n    </tr>\n    <tr>\n      <th>G17003100002</th>\n      <td>6</td>\n      <td>3265</td>\n    </tr>\n    <tr>\n      <th>G17003100003</th>\n      <td>8</td>\n      <td>2256</td>\n    </tr>\n    <tr>\n      <th>G17003100004</th>\n      <td>2</td>\n      <td>2623</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n1. `loc` takes two inputs. Selection of rows and selection of columns. If the latter is\nnot present, it is assumed that all the columns are selected. The same could be achieved by using `:`.\n2. A `list` of index values. Note that you use squared brackets (`[]`) to delineate the\nindex of the items you want to subset. In Python, this sequence of items is called a list.\n3. A `list` of columns.\n\nYou can see how you can create a list with the names (index IDs) along each of the two\ndimensions of a `DataFrame` (rows and columns), and `loc` will return a subset of the\noriginal table only with the elements queried for.\n\nAn alternative to list-based queries is what is called “range-based” queries. These work\non the indices of the table, but instead of requiring the ID of each item you want to\nretrieve, they operate by requiring only two IDs: the first and last element in a range\nof items. Range queries are expressed with a colon (`:`). For example:\n\n::: {#4678c80f .cell execution_count=22}\n``` {.python .cell-code}\nrange_query = chicago_1918.loc[\n    \"G17003100010\":\"G17003100012\",\n    \"influenza\":'total_population',\n]\nrange_query\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>influenza</th>\n      <th>total_population</th>\n    </tr>\n    <tr>\n      <th>geography_code</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>G17003100010</th>\n      <td>18</td>\n      <td>11380</td>\n    </tr>\n    <tr>\n      <th>G17003100011</th>\n      <td>16</td>\n      <td>8382</td>\n    </tr>\n    <tr>\n      <th>G17003100012</th>\n      <td>8</td>\n      <td>5874</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe range query picks up all the elements between the specified IDs. Note that for this\nto work, the first ID in the range needs to be placed before the second one in the table’s index.\n\nOnce you know about list and range-based queries, you can combine them! For example, you\ncan specify a range of rows and a list of columns:\n\n::: {#7907a953 .cell execution_count=23}\n``` {.python .cell-code}\nrange_list_qry = chicago_1918.loc[\n    \"G17003100010\":\"G17003100012\", [\"influenza\", \"total_population\"]\n]\n\nrange_list_qry\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>influenza</th>\n      <th>total_population</th>\n    </tr>\n    <tr>\n      <th>geography_code</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>G17003100010</th>\n      <td>18</td>\n      <td>11380</td>\n    </tr>\n    <tr>\n      <th>G17003100011</th>\n      <td>16</td>\n      <td>8382</td>\n    </tr>\n    <tr>\n      <th>G17003100012</th>\n      <td>8</td>\n      <td>5874</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Condition-based queries\n\nHowever, sometimes, we do not know exactly which observations we want, but we do know\nwhat conditions they need to satisfy (e.g. areas with more than 2,000 inhabitants). For\nthese cases, `DataFrames` support selection based on conditions. Let us see a few examples.\nSuppose we want to select...\n\n_... areas with more than 60 cases of influenza deaths:_\n\n::: {#658a298b .cell execution_count=24}\n``` {.python .cell-code}\nflu_over_60 = chicago_1918.loc[chicago_1918[\"influenza\"] > 60]\nflu_over_60\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gross_acres</th>\n      <th>illit</th>\n      <th>unemployed_pct</th>\n      <th>ho_pct</th>\n      <th>agecat1</th>\n      <th>agecat2</th>\n      <th>agecat3</th>\n      <th>agecat4</th>\n      <th>agecat5</th>\n      <th>agecat6</th>\n      <th>agecat7</th>\n      <th>influenza</th>\n      <th>total_population</th>\n    </tr>\n    <tr>\n      <th>geography_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>G17003100196</th>\n      <td>80.5</td>\n      <td>951</td>\n      <td>0.301564</td>\n      <td>0.016648</td>\n      <td>228</td>\n      <td>1504</td>\n      <td>925</td>\n      <td>998</td>\n      <td>608</td>\n      <td>3583</td>\n      <td>1092</td>\n      <td>62</td>\n      <td>8938</td>\n    </tr>\n    <tr>\n      <th>G17003100246</th>\n      <td>113.0</td>\n      <td>2596</td>\n      <td>0.330517</td>\n      <td>0.027537</td>\n      <td>407</td>\n      <td>2090</td>\n      <td>1497</td>\n      <td>1681</td>\n      <td>1063</td>\n      <td>4564</td>\n      <td>1934</td>\n      <td>77</td>\n      <td>13236</td>\n    </tr>\n    <tr>\n      <th>G17003100247</th>\n      <td>91.1</td>\n      <td>1534</td>\n      <td>0.293748</td>\n      <td>0.020664</td>\n      <td>215</td>\n      <td>1136</td>\n      <td>770</td>\n      <td>775</td>\n      <td>530</td>\n      <td>2993</td>\n      <td>1152</td>\n      <td>61</td>\n      <td>7571</td>\n    </tr>\n    <tr>\n      <th>G17003100285</th>\n      <td>120.0</td>\n      <td>621</td>\n      <td>0.318677</td>\n      <td>0.047779</td>\n      <td>419</td>\n      <td>1870</td>\n      <td>1190</td>\n      <td>1263</td>\n      <td>818</td>\n      <td>4370</td>\n      <td>1335</td>\n      <td>82</td>\n      <td>11265</td>\n    </tr>\n    <tr>\n      <th>G17003100352</th>\n      <td>600.0</td>\n      <td>638</td>\n      <td>0.267962</td>\n      <td>0.055023</td>\n      <td>404</td>\n      <td>1962</td>\n      <td>1251</td>\n      <td>1151</td>\n      <td>603</td>\n      <td>5261</td>\n      <td>1251</td>\n      <td>70</td>\n      <td>11883</td>\n    </tr>\n    <tr>\n      <th>G17003100494</th>\n      <td>1392.8</td>\n      <td>1504</td>\n      <td>0.336032</td>\n      <td>0.072317</td>\n      <td>309</td>\n      <td>1779</td>\n      <td>1252</td>\n      <td>1598</td>\n      <td>1086</td>\n      <td>6235</td>\n      <td>2673</td>\n      <td>85</td>\n      <td>14932</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n_... areas with less than 200 inhabitants:_\n\n::: {#c2af2cc6 .cell execution_count=25}\n``` {.python .cell-code}\npop_under = chicago_1918.loc[chicago_1918[\"total_population\"] < 200]\npop_under\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gross_acres</th>\n      <th>illit</th>\n      <th>unemployed_pct</th>\n      <th>ho_pct</th>\n      <th>agecat1</th>\n      <th>agecat2</th>\n      <th>agecat3</th>\n      <th>agecat4</th>\n      <th>agecat5</th>\n      <th>agecat6</th>\n      <th>agecat7</th>\n      <th>influenza</th>\n      <th>total_population</th>\n    </tr>\n    <tr>\n      <th>geography_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>G17003100093</th>\n      <td>71.2</td>\n      <td>34</td>\n      <td>0.268041</td>\n      <td>0.025773</td>\n      <td>4</td>\n      <td>33</td>\n      <td>20</td>\n      <td>25</td>\n      <td>10</td>\n      <td>66</td>\n      <td>36</td>\n      <td>0</td>\n      <td>194</td>\n    </tr>\n    <tr>\n      <th>G17003100293</th>\n      <td>40.0</td>\n      <td>17</td>\n      <td>0.345238</td>\n      <td>0.053571</td>\n      <td>4</td>\n      <td>23</td>\n      <td>18</td>\n      <td>26</td>\n      <td>16</td>\n      <td>59</td>\n      <td>22</td>\n      <td>0</td>\n      <td>168</td>\n    </tr>\n    <tr>\n      <th>G17003100297</th>\n      <td>38.1</td>\n      <td>4</td>\n      <td>0.461538</td>\n      <td>0.000000</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>4</td>\n      <td>0</td>\n      <td>8</td>\n      <td>10</td>\n      <td>0</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>G17003100353</th>\n      <td>320.0</td>\n      <td>28</td>\n      <td>0.193750</td>\n      <td>0.018750</td>\n      <td>1</td>\n      <td>7</td>\n      <td>4</td>\n      <td>10</td>\n      <td>12</td>\n      <td>80</td>\n      <td>46</td>\n      <td>2</td>\n      <td>160</td>\n    </tr>\n    <tr>\n      <th>G17003100488</th>\n      <td>1600.1</td>\n      <td>3</td>\n      <td>0.404762</td>\n      <td>0.000000</td>\n      <td>2</td>\n      <td>5</td>\n      <td>4</td>\n      <td>7</td>\n      <td>1</td>\n      <td>17</td>\n      <td>6</td>\n      <td>0</td>\n      <td>42</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n_... areas with exactly a hundred illiterate persons:_\n\n::: {#52a52027 .cell execution_count=26}\n``` {.python .cell-code}\nillit_100 = chicago_1918.loc[chicago_1918[\"illit\"] == 100]\nillit_100\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gross_acres</th>\n      <th>illit</th>\n      <th>unemployed_pct</th>\n      <th>ho_pct</th>\n      <th>agecat1</th>\n      <th>agecat2</th>\n      <th>agecat3</th>\n      <th>agecat4</th>\n      <th>agecat5</th>\n      <th>agecat6</th>\n      <th>agecat7</th>\n      <th>influenza</th>\n      <th>total_population</th>\n    </tr>\n    <tr>\n      <th>geography_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>G17003100076</th>\n      <td>79.4</td>\n      <td>100</td>\n      <td>0.326936</td>\n      <td>0.043691</td>\n      <td>140</td>\n      <td>791</td>\n      <td>562</td>\n      <td>666</td>\n      <td>520</td>\n      <td>3163</td>\n      <td>1496</td>\n      <td>20</td>\n      <td>7338</td>\n    </tr>\n    <tr>\n      <th>G17003100483</th>\n      <td>670.0</td>\n      <td>100</td>\n      <td>0.379153</td>\n      <td>0.142368</td>\n      <td>188</td>\n      <td>1170</td>\n      <td>829</td>\n      <td>1132</td>\n      <td>763</td>\n      <td>3191</td>\n      <td>1482</td>\n      <td>21</td>\n      <td>8755</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.callout-note}\nThese queries can grow in sophistication with almost no limits. For example, here is a\ncase where we want to find out the areas where the oldest age group is more than half the\npopulation:\n\n::: {#0fd116dc .cell execution_count=27}\n``` {.python .cell-code}\nchicago_1918.loc[\n    (chicago_1918[\"agecat7\"] * 100 / chicago_1918[\"total_population\"]) > 50\n]\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gross_acres</th>\n      <th>illit</th>\n      <th>unemployed_pct</th>\n      <th>ho_pct</th>\n      <th>agecat1</th>\n      <th>agecat2</th>\n      <th>agecat3</th>\n      <th>agecat4</th>\n      <th>agecat5</th>\n      <th>agecat6</th>\n      <th>agecat7</th>\n      <th>influenza</th>\n      <th>total_population</th>\n    </tr>\n    <tr>\n      <th>geography_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>G17003100227</th>\n      <td>146.3</td>\n      <td>22</td>\n      <td>0.0657</td>\n      <td>0.000853</td>\n      <td>2</td>\n      <td>16</td>\n      <td>9</td>\n      <td>22</td>\n      <td>27</td>\n      <td>480</td>\n      <td>614</td>\n      <td>3</td>\n      <td>1170</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\nAll the condition-based queries above are expressed using the `loc` operator. This is a\npowerful way, and since it shares syntax with index-based queries, it is also easier to\nremember. However, sometimes querying using `loc` involves a lot of quotation marks,\nparenthesis, etc. A more streamlined approach for condition-based queries of rows is\nprovided by the `query` engine. Using this approach, we express everything in our query\non a single string, or piece of text, and that is evaluated in the table at once. For\nexample, we can run the same operation as in the first query above with the following\nsyntax:\n\n::: {#f0fe47fd .cell execution_count=28}\n``` {.python .cell-code}\nflu_over_60_query = chicago_1918.query(\"influenza > 60\")\nflu_over_60_query\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gross_acres</th>\n      <th>illit</th>\n      <th>unemployed_pct</th>\n      <th>ho_pct</th>\n      <th>agecat1</th>\n      <th>agecat2</th>\n      <th>agecat3</th>\n      <th>agecat4</th>\n      <th>agecat5</th>\n      <th>agecat6</th>\n      <th>agecat7</th>\n      <th>influenza</th>\n      <th>total_population</th>\n    </tr>\n    <tr>\n      <th>geography_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>G17003100196</th>\n      <td>80.5</td>\n      <td>951</td>\n      <td>0.301564</td>\n      <td>0.016648</td>\n      <td>228</td>\n      <td>1504</td>\n      <td>925</td>\n      <td>998</td>\n      <td>608</td>\n      <td>3583</td>\n      <td>1092</td>\n      <td>62</td>\n      <td>8938</td>\n    </tr>\n    <tr>\n      <th>G17003100246</th>\n      <td>113.0</td>\n      <td>2596</td>\n      <td>0.330517</td>\n      <td>0.027537</td>\n      <td>407</td>\n      <td>2090</td>\n      <td>1497</td>\n      <td>1681</td>\n      <td>1063</td>\n      <td>4564</td>\n      <td>1934</td>\n      <td>77</td>\n      <td>13236</td>\n    </tr>\n    <tr>\n      <th>G17003100247</th>\n      <td>91.1</td>\n      <td>1534</td>\n      <td>0.293748</td>\n      <td>0.020664</td>\n      <td>215</td>\n      <td>1136</td>\n      <td>770</td>\n      <td>775</td>\n      <td>530</td>\n      <td>2993</td>\n      <td>1152</td>\n      <td>61</td>\n      <td>7571</td>\n    </tr>\n    <tr>\n      <th>G17003100285</th>\n      <td>120.0</td>\n      <td>621</td>\n      <td>0.318677</td>\n      <td>0.047779</td>\n      <td>419</td>\n      <td>1870</td>\n      <td>1190</td>\n      <td>1263</td>\n      <td>818</td>\n      <td>4370</td>\n      <td>1335</td>\n      <td>82</td>\n      <td>11265</td>\n    </tr>\n    <tr>\n      <th>G17003100352</th>\n      <td>600.0</td>\n      <td>638</td>\n      <td>0.267962</td>\n      <td>0.055023</td>\n      <td>404</td>\n      <td>1962</td>\n      <td>1251</td>\n      <td>1151</td>\n      <td>603</td>\n      <td>5261</td>\n      <td>1251</td>\n      <td>70</td>\n      <td>11883</td>\n    </tr>\n    <tr>\n      <th>G17003100494</th>\n      <td>1392.8</td>\n      <td>1504</td>\n      <td>0.336032</td>\n      <td>0.072317</td>\n      <td>309</td>\n      <td>1779</td>\n      <td>1252</td>\n      <td>1598</td>\n      <td>1086</td>\n      <td>6235</td>\n      <td>2673</td>\n      <td>85</td>\n      <td>14932</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIf we want to combine operations, this is also possible:\n\n::: {#15f29f80 .cell execution_count=29}\n``` {.python .cell-code}\nflu_query = chicago_1918.query(\"(influenza > 60) & (total_population < 10000)\")\nflu_query\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gross_acres</th>\n      <th>illit</th>\n      <th>unemployed_pct</th>\n      <th>ho_pct</th>\n      <th>agecat1</th>\n      <th>agecat2</th>\n      <th>agecat3</th>\n      <th>agecat4</th>\n      <th>agecat5</th>\n      <th>agecat6</th>\n      <th>agecat7</th>\n      <th>influenza</th>\n      <th>total_population</th>\n    </tr>\n    <tr>\n      <th>geography_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>G17003100196</th>\n      <td>80.5</td>\n      <td>951</td>\n      <td>0.301564</td>\n      <td>0.016648</td>\n      <td>228</td>\n      <td>1504</td>\n      <td>925</td>\n      <td>998</td>\n      <td>608</td>\n      <td>3583</td>\n      <td>1092</td>\n      <td>62</td>\n      <td>8938</td>\n    </tr>\n    <tr>\n      <th>G17003100247</th>\n      <td>91.1</td>\n      <td>1534</td>\n      <td>0.293748</td>\n      <td>0.020664</td>\n      <td>215</td>\n      <td>1136</td>\n      <td>770</td>\n      <td>775</td>\n      <td>530</td>\n      <td>2993</td>\n      <td>1152</td>\n      <td>61</td>\n      <td>7571</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNote that, in these cases, using query results in code that is much more streamlined and\neasier to read. However, `query` is not perfect and, particularly for more sophisticated\nqueries, it does not afford the same degree of flexibility. For example, the last `query`\nwe had using loc would not be possible using `query`.\n\n::: {.callout-tip}\nIf you are interested, more detail about `query` is available on the\n[pandas documentation](https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#the-query-method).\n:::\n\n### Combining queries\n\nNow, all of these queries can be combined with each other for further flexibility. For\nexample, imagine we want areas with more than 60 cases of influenza from areas with less than 10,000 inhabitants:\n\n::: {#a3c73fba .cell execution_count=30}\n``` {.python .cell-code}\nflu_loc = chicago_1918.loc[\n    (chicago_1918[\"influenza\"] > 60) & (chicago_1918[\"total_population\"] < 10000)  # <1>\n]\nflu_loc\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gross_acres</th>\n      <th>illit</th>\n      <th>unemployed_pct</th>\n      <th>ho_pct</th>\n      <th>agecat1</th>\n      <th>agecat2</th>\n      <th>agecat3</th>\n      <th>agecat4</th>\n      <th>agecat5</th>\n      <th>agecat6</th>\n      <th>agecat7</th>\n      <th>influenza</th>\n      <th>total_population</th>\n    </tr>\n    <tr>\n      <th>geography_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>G17003100196</th>\n      <td>80.5</td>\n      <td>951</td>\n      <td>0.301564</td>\n      <td>0.016648</td>\n      <td>228</td>\n      <td>1504</td>\n      <td>925</td>\n      <td>998</td>\n      <td>608</td>\n      <td>3583</td>\n      <td>1092</td>\n      <td>62</td>\n      <td>8938</td>\n    </tr>\n    <tr>\n      <th>G17003100247</th>\n      <td>91.1</td>\n      <td>1534</td>\n      <td>0.293748</td>\n      <td>0.020664</td>\n      <td>215</td>\n      <td>1136</td>\n      <td>770</td>\n      <td>775</td>\n      <td>530</td>\n      <td>2993</td>\n      <td>1152</td>\n      <td>61</td>\n      <td>7571</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n1. The `&` operator combines both conditions together.\n\n::: {.callout-note collapse=\"true\"}\n## How the `loc` queries work?\n\nLet's unpack how these queries work. Each part of the query above creates a single\n`Series` with boolean (`True` or `False`) values, encoding whether the row fulfils the condition\nor not.\n\n::: {#f2af628d .cell execution_count=31}\n``` {.python .cell-code}\nchicago_1918[\"influenza\"] > 60\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\ngeography_code\nG17003100001    False\nG17003100002    False\nG17003100003    False\nG17003100004    False\nG17003100005    False\n                ...  \nG17003100492    False\nG17003100493    False\nG17003100494     True\nG17003100495    False\nG17003100496    False\nName: influenza, Length: 496, dtype: bool\n```\n:::\n:::\n\n\n::: {#b6fc20a4 .cell execution_count=32}\n``` {.python .cell-code}\nchicago_1918[\"total_population\"] < 10000\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\ngeography_code\nG17003100001     True\nG17003100002     True\nG17003100003     True\nG17003100004     True\nG17003100005     True\n                ...  \nG17003100492     True\nG17003100493    False\nG17003100494    False\nG17003100495     True\nG17003100496     True\nName: total_population, Length: 496, dtype: bool\n```\n:::\n:::\n\n\nYou then combine two of these Series with `&`, asking for a new `Series` where values in\nboth the first and the second `Series` are `True`.\n\n::: {#498352fa .cell execution_count=33}\n``` {.python .cell-code}\n(chicago_1918[\"influenza\"] > 60) & (chicago_1918[\"total_population\"] < 10000)\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\ngeography_code\nG17003100001    False\nG17003100002    False\nG17003100003    False\nG17003100004    False\nG17003100005    False\n                ...  \nG17003100492    False\nG17003100493    False\nG17003100494    False\nG17003100495    False\nG17003100496    False\nLength: 496, dtype: bool\n```\n:::\n:::\n\n\nSuch a `Series` is then essentially used as a mask, and `loc` returns only those columns\nthat contain `True` in that mask.\n:::\n\n### Sorting\n\nAmong the many operations `DataFrame` objects support, one of the most useful ones is to\nsort a table based on a given column. For example, imagine we want to sort the table by\nthe influenza cases:\n\n::: {#90f01bf2 .cell execution_count=34}\n``` {.python .cell-code}\nchicago_sorted = chicago_1918.sort_values('influenza', ascending=False)  # <1>\nchicago_sorted\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gross_acres</th>\n      <th>illit</th>\n      <th>unemployed_pct</th>\n      <th>ho_pct</th>\n      <th>agecat1</th>\n      <th>agecat2</th>\n      <th>agecat3</th>\n      <th>agecat4</th>\n      <th>agecat5</th>\n      <th>agecat6</th>\n      <th>agecat7</th>\n      <th>influenza</th>\n      <th>total_population</th>\n    </tr>\n    <tr>\n      <th>geography_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>G17003100494</th>\n      <td>1392.8</td>\n      <td>1504</td>\n      <td>0.336032</td>\n      <td>0.072317</td>\n      <td>309</td>\n      <td>1779</td>\n      <td>1252</td>\n      <td>1598</td>\n      <td>1086</td>\n      <td>6235</td>\n      <td>2673</td>\n      <td>85</td>\n      <td>14932</td>\n    </tr>\n    <tr>\n      <th>G17003100285</th>\n      <td>120.0</td>\n      <td>621</td>\n      <td>0.318677</td>\n      <td>0.047779</td>\n      <td>419</td>\n      <td>1870</td>\n      <td>1190</td>\n      <td>1263</td>\n      <td>818</td>\n      <td>4370</td>\n      <td>1335</td>\n      <td>82</td>\n      <td>11265</td>\n    </tr>\n    <tr>\n      <th>G17003100246</th>\n      <td>113.0</td>\n      <td>2596</td>\n      <td>0.330517</td>\n      <td>0.027537</td>\n      <td>407</td>\n      <td>2090</td>\n      <td>1497</td>\n      <td>1681</td>\n      <td>1063</td>\n      <td>4564</td>\n      <td>1934</td>\n      <td>77</td>\n      <td>13236</td>\n    </tr>\n    <tr>\n      <th>G17003100352</th>\n      <td>600.0</td>\n      <td>638</td>\n      <td>0.267962</td>\n      <td>0.055023</td>\n      <td>404</td>\n      <td>1962</td>\n      <td>1251</td>\n      <td>1151</td>\n      <td>603</td>\n      <td>5261</td>\n      <td>1251</td>\n      <td>70</td>\n      <td>11883</td>\n    </tr>\n    <tr>\n      <th>G17003100196</th>\n      <td>80.5</td>\n      <td>951</td>\n      <td>0.301564</td>\n      <td>0.016648</td>\n      <td>228</td>\n      <td>1504</td>\n      <td>925</td>\n      <td>998</td>\n      <td>608</td>\n      <td>3583</td>\n      <td>1092</td>\n      <td>62</td>\n      <td>8938</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>G17003100297</th>\n      <td>38.1</td>\n      <td>4</td>\n      <td>0.461538</td>\n      <td>0.000000</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>4</td>\n      <td>0</td>\n      <td>8</td>\n      <td>10</td>\n      <td>0</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>G17003100209</th>\n      <td>124.1</td>\n      <td>13</td>\n      <td>0.438105</td>\n      <td>0.062971</td>\n      <td>30</td>\n      <td>120</td>\n      <td>92</td>\n      <td>196</td>\n      <td>166</td>\n      <td>763</td>\n      <td>491</td>\n      <td>0</td>\n      <td>1858</td>\n    </tr>\n    <tr>\n      <th>G17003100293</th>\n      <td>40.0</td>\n      <td>17</td>\n      <td>0.345238</td>\n      <td>0.053571</td>\n      <td>4</td>\n      <td>23</td>\n      <td>18</td>\n      <td>26</td>\n      <td>16</td>\n      <td>59</td>\n      <td>22</td>\n      <td>0</td>\n      <td>168</td>\n    </tr>\n    <tr>\n      <th>G17003100202</th>\n      <td>13.1</td>\n      <td>6</td>\n      <td>0.323326</td>\n      <td>0.027714</td>\n      <td>5</td>\n      <td>40</td>\n      <td>24</td>\n      <td>37</td>\n      <td>28</td>\n      <td>218</td>\n      <td>78</td>\n      <td>0</td>\n      <td>430</td>\n    </tr>\n    <tr>\n      <th>G17003100396</th>\n      <td>26.2</td>\n      <td>8</td>\n      <td>0.344066</td>\n      <td>0.015639</td>\n      <td>14</td>\n      <td>54</td>\n      <td>31</td>\n      <td>53</td>\n      <td>48</td>\n      <td>609</td>\n      <td>275</td>\n      <td>0</td>\n      <td>1084</td>\n    </tr>\n  </tbody>\n</table>\n<p>496 rows × 13 columns</p>\n</div>\n```\n:::\n:::\n\n\n1. By default, `pandas` is sorting from the smallest to the largest values (ascending).\nBy specifying `ascending=False`, you switch the order.\n\nGiven the areas of each census tract differ, it may be better to sort by the mortality rate\nrather than raw counts.\n\n::: {#aa289bce .cell execution_count=35}\n``` {.python .cell-code}\nchicago_1918[\"flu_rate\"] = chicago_1918[\"influenza\"] / chicago_1918[\"total_population\"]\nchicago_sorted_rel = chicago_1918.sort_values('flu_rate', ascending=False)\nchicago_sorted_rel\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gross_acres</th>\n      <th>illit</th>\n      <th>unemployed_pct</th>\n      <th>ho_pct</th>\n      <th>agecat1</th>\n      <th>agecat2</th>\n      <th>agecat3</th>\n      <th>agecat4</th>\n      <th>agecat5</th>\n      <th>agecat6</th>\n      <th>agecat7</th>\n      <th>influenza</th>\n      <th>total_population</th>\n      <th>flu_rate</th>\n    </tr>\n    <tr>\n      <th>geography_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>G17003100086</th>\n      <td>140.7</td>\n      <td>153</td>\n      <td>0.331750</td>\n      <td>0.034838</td>\n      <td>39</td>\n      <td>179</td>\n      <td>144</td>\n      <td>197</td>\n      <td>111</td>\n      <td>399</td>\n      <td>189</td>\n      <td>26</td>\n      <td>1258</td>\n      <td>0.020668</td>\n    </tr>\n    <tr>\n      <th>G17003100022</th>\n      <td>233.2</td>\n      <td>20</td>\n      <td>0.369973</td>\n      <td>0.107239</td>\n      <td>6</td>\n      <td>28</td>\n      <td>35</td>\n      <td>48</td>\n      <td>28</td>\n      <td>151</td>\n      <td>77</td>\n      <td>7</td>\n      <td>373</td>\n      <td>0.018767</td>\n    </tr>\n    <tr>\n      <th>G17003100261</th>\n      <td>164.9</td>\n      <td>287</td>\n      <td>0.307767</td>\n      <td>0.031068</td>\n      <td>25</td>\n      <td>126</td>\n      <td>92</td>\n      <td>113</td>\n      <td>87</td>\n      <td>414</td>\n      <td>172</td>\n      <td>18</td>\n      <td>1029</td>\n      <td>0.017493</td>\n    </tr>\n    <tr>\n      <th>G17003100282</th>\n      <td>293.5</td>\n      <td>97</td>\n      <td>0.142330</td>\n      <td>0.044248</td>\n      <td>15</td>\n      <td>70</td>\n      <td>67</td>\n      <td>74</td>\n      <td>198</td>\n      <td>758</td>\n      <td>173</td>\n      <td>20</td>\n      <td>1355</td>\n      <td>0.014760</td>\n    </tr>\n    <tr>\n      <th>G17003100249</th>\n      <td>137.0</td>\n      <td>317</td>\n      <td>0.337257</td>\n      <td>0.017202</td>\n      <td>63</td>\n      <td>314</td>\n      <td>277</td>\n      <td>345</td>\n      <td>171</td>\n      <td>718</td>\n      <td>320</td>\n      <td>31</td>\n      <td>2208</td>\n      <td>0.014040</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>G17003100202</th>\n      <td>13.1</td>\n      <td>6</td>\n      <td>0.323326</td>\n      <td>0.027714</td>\n      <td>5</td>\n      <td>40</td>\n      <td>24</td>\n      <td>37</td>\n      <td>28</td>\n      <td>218</td>\n      <td>78</td>\n      <td>0</td>\n      <td>430</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>G17003100093</th>\n      <td>71.2</td>\n      <td>34</td>\n      <td>0.268041</td>\n      <td>0.025773</td>\n      <td>4</td>\n      <td>33</td>\n      <td>20</td>\n      <td>25</td>\n      <td>10</td>\n      <td>66</td>\n      <td>36</td>\n      <td>0</td>\n      <td>194</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>G17003100293</th>\n      <td>40.0</td>\n      <td>17</td>\n      <td>0.345238</td>\n      <td>0.053571</td>\n      <td>4</td>\n      <td>23</td>\n      <td>18</td>\n      <td>26</td>\n      <td>16</td>\n      <td>59</td>\n      <td>22</td>\n      <td>0</td>\n      <td>168</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>G17003100297</th>\n      <td>38.1</td>\n      <td>4</td>\n      <td>0.461538</td>\n      <td>0.000000</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>4</td>\n      <td>0</td>\n      <td>8</td>\n      <td>10</td>\n      <td>0</td>\n      <td>26</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>G17003100488</th>\n      <td>1600.1</td>\n      <td>3</td>\n      <td>0.404762</td>\n      <td>0.000000</td>\n      <td>2</td>\n      <td>5</td>\n      <td>4</td>\n      <td>7</td>\n      <td>1</td>\n      <td>17</td>\n      <td>6</td>\n      <td>0</td>\n      <td>42</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>496 rows × 14 columns</p>\n</div>\n```\n:::\n:::\n\n\nIf you inspect the help of `chicago_1918.sort_values`, you will find that you can pass\nmore than one column to sort the table by. This allows you to do so-called hierarchical\nsorting: sort first based on one column, if equal, then based on another column, etc.\n\n## Visual Exploration\n\n::: {#cb7b0ffc .cell execution_count=36}\n``` {.python .cell-code}\n_ = chicago_1918[\"influenza\"].plot.hist()\n```\n\n::: {.cell-output .cell-output-display}\n![](hands_on_files/figure-html/cell-37-output-1.png){width=593 height=411}\n:::\n:::\n\n\n::: {#9b7607d3 .cell execution_count=37}\n``` {.python .cell-code}\nimport seaborn as sns\n```\n:::\n\n\n::: {#008472be .cell execution_count=38}\n``` {.python .cell-code}\nsns.displot(chicago_1918[\"influenza\"])\n```\n\n::: {.cell-output .cell-output-display}\n![](hands_on_files/figure-html/cell-39-output-1.png){width=469 height=468}\n:::\n:::\n\n\n::: {#d8e3e1b3 .cell execution_count=39}\n``` {.python .cell-code}\nsns.displot(chicago_1918[\"influenza\"], kind=\"kde\", fill=True)\n```\n\n::: {.cell-output .cell-output-display}\n![](hands_on_files/figure-html/cell-40-output-1.png){width=470 height=468}\n:::\n:::\n\n\n::: {#0892eb26 .cell execution_count=40}\n``` {.python .cell-code}\n_ = chicago_1918[\"influenza\"].sort_values(ascending=False).plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](hands_on_files/figure-html/cell-41-output-1.png){width=568 height=429}\n:::\n:::\n\n\n::: {#1e6d7700 .cell execution_count=41}\n``` {.python .cell-code}\n_ = chicago_1918[\"influenza\"].sort_values(ascending=False).head(10).plot.bar()\n```\n\n::: {.cell-output .cell-output-display}\n![](hands_on_files/figure-html/cell-42-output-1.png){width=566 height=520}\n:::\n:::\n\n\n::: {#e7f707f9 .cell execution_count=42}\n``` {.python .cell-code}\n_ = chicago_1918[\"total_population\"].sort_values().head(50).plot.barh(figsize=(6, 20))\n```\n\n::: {.cell-output .cell-output-display}\n![](hands_on_files/figure-html/cell-43-output-1.png){width=597 height=1520}\n:::\n:::\n\n\n## Tidy data\n\n::: {#349af44f .cell execution_count=43}\n``` {.python .cell-code}\npopulation = chicago_1918.loc[:, \"agecat1\":\"agecat7\"]\n```\n:::\n\n\n::: {#c7c954bc .cell execution_count=44}\n``` {.python .cell-code}\ntidy_population = population.stack()\ntidy_population.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\ngeography_code         \nG17003100001    agecat1     46\n                agecat2    274\n                agecat3    257\n                agecat4    311\n                agecat5    222\ndtype: int64\n```\n:::\n:::\n\n\n::: {#3a1dae8e .cell execution_count=45}\n``` {.python .cell-code}\ntidy_population_df = tidy_population.reset_index()\ntidy_population_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>geography_code</th>\n      <th>level_1</th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>G17003100001</td>\n      <td>agecat1</td>\n      <td>46</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>G17003100001</td>\n      <td>agecat2</td>\n      <td>274</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>G17003100001</td>\n      <td>agecat3</td>\n      <td>257</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>G17003100001</td>\n      <td>agecat4</td>\n      <td>311</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>G17003100001</td>\n      <td>agecat5</td>\n      <td>222</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#764b4384 .cell execution_count=46}\n``` {.python .cell-code}\ntidy_population_df = tidy_population_df.rename(\n    columns={\"level_1\": \"age_category\", 0: \"count\"}\n)\ntidy_population_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>geography_code</th>\n      <th>age_category</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>G17003100001</td>\n      <td>agecat1</td>\n      <td>46</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>G17003100001</td>\n      <td>agecat2</td>\n      <td>274</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>G17003100001</td>\n      <td>agecat3</td>\n      <td>257</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>G17003100001</td>\n      <td>agecat4</td>\n      <td>311</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>G17003100001</td>\n      <td>agecat5</td>\n      <td>222</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Grouping, transforming, aggregating\n\n::: {#fd0bc058 .cell execution_count=47}\n``` {.python .cell-code}\npop_grouped = tidy_population_df.groupby(\"age_category\")\npop_grouped\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\n<pandas.core.groupby.generic.DataFrameGroupBy object at 0x143d95360>\n```\n:::\n:::\n\n\n::: {#9b5d5ba7 .cell execution_count=48}\n``` {.python .cell-code}\npop_grouped.sum(numeric_only=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n    </tr>\n    <tr>\n      <th>age_category</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>agecat1</th>\n      <td>50776</td>\n    </tr>\n    <tr>\n      <th>agecat2</th>\n      <td>275363</td>\n    </tr>\n    <tr>\n      <th>agecat3</th>\n      <td>201654</td>\n    </tr>\n    <tr>\n      <th>agecat4</th>\n      <td>259954</td>\n    </tr>\n    <tr>\n      <th>agecat5</th>\n      <td>206358</td>\n    </tr>\n    <tr>\n      <th>agecat6</th>\n      <td>1171345</td>\n    </tr>\n    <tr>\n      <th>agecat7</th>\n      <td>522130</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#c246e1fb .cell execution_count=49}\n``` {.python .cell-code}\npop_grouped.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"8\" halign=\"left\">count</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>age_category</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>agecat1</th>\n      <td>496.0</td>\n      <td>102.370968</td>\n      <td>78.677423</td>\n      <td>0.0</td>\n      <td>46.75</td>\n      <td>82.0</td>\n      <td>136.00</td>\n      <td>427.0</td>\n    </tr>\n    <tr>\n      <th>agecat2</th>\n      <td>496.0</td>\n      <td>555.167339</td>\n      <td>423.526444</td>\n      <td>3.0</td>\n      <td>256.50</td>\n      <td>442.5</td>\n      <td>717.50</td>\n      <td>2512.0</td>\n    </tr>\n    <tr>\n      <th>agecat3</th>\n      <td>496.0</td>\n      <td>406.560484</td>\n      <td>301.564896</td>\n      <td>1.0</td>\n      <td>193.50</td>\n      <td>331.5</td>\n      <td>532.50</td>\n      <td>1917.0</td>\n    </tr>\n    <tr>\n      <th>agecat4</th>\n      <td>496.0</td>\n      <td>524.100806</td>\n      <td>369.875444</td>\n      <td>4.0</td>\n      <td>253.75</td>\n      <td>453.5</td>\n      <td>709.50</td>\n      <td>2665.0</td>\n    </tr>\n    <tr>\n      <th>agecat5</th>\n      <td>496.0</td>\n      <td>416.044355</td>\n      <td>281.825682</td>\n      <td>0.0</td>\n      <td>220.50</td>\n      <td>377.0</td>\n      <td>551.75</td>\n      <td>2454.0</td>\n    </tr>\n    <tr>\n      <th>agecat6</th>\n      <td>496.0</td>\n      <td>2361.582661</td>\n      <td>1545.469426</td>\n      <td>8.0</td>\n      <td>1169.75</td>\n      <td>2102.0</td>\n      <td>3191.75</td>\n      <td>9792.0</td>\n    </tr>\n    <tr>\n      <th>agecat7</th>\n      <td>496.0</td>\n      <td>1052.681452</td>\n      <td>722.955717</td>\n      <td>6.0</td>\n      <td>519.75</td>\n      <td>918.5</td>\n      <td>1379.25</td>\n      <td>4163.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.callout}\n# Acknowledgements\n\nThis section is derived from _A Course on Geographic Data Science_ by\n@darribas_gds_course, licensed under CC-BY-SA 4.0. The text was slightly adapted, mostly\nto accommodate a different dataset used.\n:::\n\n",
    "supporting": [
      "hands_on_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}