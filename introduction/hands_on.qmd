---
title: "Jupyter"
format:
  html: default
  ipynb: default
jupyter: sds
aliases:
  - ../chapter_01/hands_on.html
---

Welcome to the first **hands-on** section of the course. You will familiarise yourself
with the tools you will be using, ensure that all works as it should, and prepare for
some Python code.

::: {.callout-important}
## Do you have Python ready?

Before you start, ensure you have carefully read and followed the instructions
[outlined in the Infrastructure section](../course_information/infrastructure.qmd) and have a
working installation of Python and some Jupyter Notebook IDE, either via Jupyter Lab
(recommended) or on Google Colab.
:::

## Shell

Spatial Data Science depends on code, and coding environments can be unfriendly to
an average user. People designing the tools are often computer scientists or have a strong
knowledge of CS-related environments. It means we sometimes need to deal with tools
that look a bit scary, like a Terminal or a Command line. Below is a brief introduction
to the tools you will need for this course.

### Terminal and Command line

Depending on your operating system, you will have either Terminal (macOS, Linux) or
Anaconda Prompt application installed. It will look like this:

![Terminal on macOS](../_assets/figures/introduction/terminal.png)

Terminal (and Anaconda Prompt or Command line, but we will refer to all as the terminal for simplicity) is
used to interact with applications that do not have any graphic interface or with
the apps that do have one, but you want to use them programmatically. The terminal usage
is straightforward. Let's start with a few examples.

1. Create a folder (or maybe you already have) to store files for this course.
2. Download this notebook by clicking on the [Jupyter]{.keystroke} option on the right
   side of this page and move the notebook to the folder.

You want to see a list of files and folders you have in the folder. First, you need to navigate to
the folder. For that, you can use the `cd` command, which stands for [c]{.accent}hange
[d]{.accent}irectory.

```sh
cd courses/sds/
```

Let's assume that you have the folder with course material in the folder called `sds` in
another folder called `courses`. The full command is then composed of the `cd` part,
saying *set the current directory to...* and waits for the parameter, which is a path
to the folder in this case - `courses/sds/`.

Once in the correct folder, you can use another command, `ls`, which stands for [l]{.accent}i[s]{.accent}t
and allows you to list the contents of the current directory.

```sh
ls
```

The output would look like this:

![Output of the `ls` command.](../_assets/figures/introduction/ls.png)

You can also pass a parameter `-l`, specifying that you want a long listing including attributes.

```sh
ls -l
```

That changes the output to this:

![Output of the `ls -l` command.](../_assets/figures/introduction/ls-l.png)

The syntax is always the same, starting with the app name and then followed by parameters.

## Conda

If you
followed the installation of Python described in the [infrastructure](../course_information/infrastructure.qmd)
section, you have used `conda` with parameters specifying that you want to use it
to create an environment based on an `environment.yml` file. But what is `conda`?

`Conda`, is a tool you will use to create "environments" and install
Python and Python packages. It is a package manager, ensuring
all the necessary parts work together. For example, if you want to create a new environment
and install Python in it, you type the following command in your terminal.

```sh
conda create -n my_environment python
```

You don't need to do that now but it is useful as you will probably need that at some
point later. You can check more in the [documentation of conda](https://docs.anaconda.com/working-with-conda/).

### Other options

Conda is not the only way of setting up a Python environment. If you don't want to install anything on your
local machine, you can use [Google Colab](http://colab.research.google.com), which gives you an environment with Python and an
interface to work with Jupyter Notebooks.

## Jupyter Notebook and Jupyter Lab

While you can interact with Python from the terminal, it is inconvenient. Instead, you
will use Jypyter Notebooks and Jupyter Lab. Jupyter Notebooks are documents that allow
you to mix text and code, execute small pieces of code one at a time and include
graphical outputs of your code. Jupyter Lab is a handy interface that allows you to work
with multiple notebooks and switch between your Python environments created with conda.

It is time to say goodbye to the terminal and start Jupyter Lab. You should ensure you
have your `sds` environment activated first:

```sh
conda activate sds
```

Then you can start Lab using:

```sh
jupyter lab
```

This command should open your browser and load the Jupyter Lab interface.

![Jupyter Lab interface](../_assets/figures/introduction/lab.png)

In the launcher, we can create a new Notebook by clicking on the Python logo representing
our current environment. If you have more of them, you will see them there, as well as
other environments using different programming languages like R or Julia.

The notebook is composed of cells. This is a cell:

![Jupyter Notebook cell](../_assets/figures/introduction/cell.png)

Cells can contain either code or text. A typical notebook is then a series of cells where
some include text describing what is happening while others contain the code, either
waiting for execution or already executed. The cells with the executed code may also
contain outputs.

You can start with simple math that Python can do natively. Run the following code cell.
To do that, you can either click the "play" button on top or hit [Shift]{.keystroke} + [Enter]{.keystroke}:

```{python}
1 + 1
```

You now have a code cell with the output. Jupyter Lab automatically created a new cell.
Change its type to `Markdown` and write a short text describing what the cell above does.

### Markdown

Text cells can be formatted using the [Markdown](https://www.markdownguide.org) syntax.
Markdown is a way of using plain text to write documents that can later be formatted by
a rendering engine (Jupyter Lab is the rendering engine in this case). Unlike $\LaTeX$, it
is very lightweight.

In a cell of a Markdown type, you can:

::: {.panel-tabset}

## Markdown

```
- create
- simple
- lists
```

## Render

- create
- simple
- lists

:::

If you need numbering, you can:

::: {.panel-tabset}

## Markdown

```
1. create
2. numbered
3. lists
    1. or nested
    2. lists within lists
4. that may continue below
```

## Render

1. create
2. numbered
3. lists
    1. or nested
    2. lists within lists
4. that may continue below

:::

You can also include links:

::: {.panel-tabset}

## Markdown

```
Wrap a word that shall be a [link](https://github.com) in square brackets followed by
round brackets with the URL.
```

## Render

Wrap a word that shall be a [link](https://github.com) in square brackets followed by
round brackets with the URL.

:::

Or include images, using a very similar syntax.

::: {.panel-tabset}

## Markdown

```
![Alt text describing the figure (optional)](https://imgs.xkcd.com/comics/standards.png)
```

## Render

![Alt text describing the figure (optional)](https://imgs.xkcd.com/comics/standards.png)

:::

Markdown has a few flavours, which are often compatible but some marks are unique to
distinct flavours. You can therefore write _italic_ using underscores `_italic_` or using
stars `*italic*` around the text you want to adapt. The same applies to **bold**, with
two underscores or stars `**bold**`.

You can further include mathematical formulas using $\LaTeX$. Either using the inline syntax
`$e = mc^2$` which renders as $e = mc^2$ or as a proper formula:

::: {.panel-tabset}

## Markdown

```
$$
I = \frac N W \frac {\sum_{i=1}^N \sum_{j=1}^N w_{ij}(x_i-\bar x) (x_j-\bar x)} {\sum_{i=1}^N (x_i-\bar x)^2}
$$
```

## Render

$$
I = \frac N W \frac {\sum_{i=1}^N \sum_{j=1}^N w_{ij}(x_i-\bar x) (x_j-\bar x)} {\sum_{i=1}^N (x_i-\bar x)^2}
$$

:::

Markdown can also do tables, like this one:

::: {.panel-tabset}

## Markdown

```
| Language | Year |
| -------- | ---- |
| Python   | 1991 |
| R        | 1993 |
| Julia    | 2012 |
| Rust     | 2015 |
```

## Render

| Language | Year |
| -------- | ---- |
| Python   | 1991 |
| R        | 1993 |
| Julia    | 2012 |
| Rust     | 2015 |

:::

For structuring the documents, Markdown offers up to six levels of headings.

::: {.panel-tabset}

## Markdown

```
# Heading level 1

### Heading level 3

##### Heading level 5

```

## Render

# Heading level 1

### Heading level 3

##### Heading level 5

:::

While you can also use basic HTML within Markdown (the cell is rendered in the browser anyway),
please try to avoid doing so and stick to vanilla Markdown if possible. The inclusion of HTML
tends to break some rendering engines and alter the expected visual style of the resulting
document.

### Notebook essentials

Jupyter Notebooks are great and have a lot of built-in features that can improve your quality
of life.

#### Execution

While you can run the code cell by clicking on the â–¶ button on the top, try creating muscle memory
for [Shift]{.keystroke} + [Enter]{.keystroke} instead. You'll be much faster.

#### Tab completion

Learn to use [Tab]{.keystroke}. It provides you with all possible actions you can do after loading in a library __and__ it is used for automatic autocompletion. Try hitting [Tab]{.keystroke} while writing the code below.

```{python}
import math

math.pi
```

As you have noticed, Jupyter gives you options on what you can import or use. It also remembers all the variables
so you don't have to type them next time.

```{python}
variable_name_that_got_super_long = 42
1 + variable_name_that_got_super_long
```

#### Contextual help

Each Python function comes with documentation. You can fetch and display it directly in the Notebook
using [Shift]{.keystroke} + [Tab]{.keystroke}. Try using it in the cell below.

```{python}
math.sin(math.pi)
```

#### Cell mode

Each cell can be either in the _edit_ mode or in the _command_ mode. Edit mode allows you
to change the contents of the cell. In the case of code cells, it looks nearly the same as the
command mode but in the case of Markdown cells, edit mode shows the plain text with the Markdown syntax while
the command mode shows the rendered text. You can enter the edit mode by hitting [Enter]{.keystroke}.

Command mode moves you away from editing individual cells and allows you to use keyboard shortcuts
to manipulate the notebook. You can enter the command mode by hitting [Esc]{.keystroke}.

#### Shortcuts

When you are in command mode, you can use a wide range of keyboard shortcuts. For example:

- [A]{.keystroke} creates a new cell above the selected one.
- [B]{.keystroke} creates a new cell below the selected one.
- [C]{.keystroke} copies the selected cell, while [V]{.keystroke} pastes it below.
- [D]{.keystroke} + [D]{.keystroke} deletes the cell.
- [M]{.keystroke} changes the cell type to Markdown.
- [Y]{.keystroke} changes the cell type to code.
- [Ctrl]{.keystroke} + [Shift]{.keystroke} + [C]{.keystroke} / [Cmd]{.keystroke} + [Shift]{.keystroke} + [C]{.keystroke} opens a command palette.

#### I am stuck!

Things may get stuck or break completely. When that happens:

- first, try `Kernel` > `Interrupt` -> your cell should stop running
- if that does not help -> `Kernel` > `Restart` -> restart your notebook

::: {.callout-tip}
# Python basics

This course won't cover the very basics of Python. You may be able to catch it along the
way but if you prefer more explicit material, have a look at _[A taste of Python](https://geo-python-site.readthedocs.io/en/latest/notebooks/L1/a-taste-of-python.html)_ section of the _[Geo-Python](https://geo-python-site.readthedocs.io) course_ by D. Whipp, H. Tenkanen, V. Heikinheimo, H. Aagesen, and C. Fink.
:::

## Acknowledgements {.appendix}

The Jupyter Notebook section is inspired by [_Data manipulation, analysis and visualisation in Python_](https://github.com/jorisvandenbossche/DS-python-data-analysis) by Joris Van den Bossche and Stijn Van Hoey licensed under CC-BY 4.0.